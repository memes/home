# -*- mode: sh -*-
# MEmes login environment setup
#
# Add to .profile
# [ -f "${HOME}/.profile_memes" ] && . "${HOME}/.profile_memes"

# Setup base environment
export TZ="America/Los_Angeles"
export EDITOR=$(which emacsclient 2>/dev/null)
export VISUAL=${EDITOR}

# Use system libvirt connections by default
export LIBVIRT_DEFAULT_URI=qemu:///system

# Make sure QT is using GTK theme
export QT_QPA_PLATFORMTHEME=qgnomeplatform

# Outputs a string containing the new 'PATH'
# $1 = directory to add
# $2 = expanded path-like value
_addToPath() {
  if [ -n "$1" -a -d "${1}" ]; then
    echo "${2}" | grep -q "${1}" 2>/dev/null
    if [ $? -ne 0 ]; then
      echo "${1}${2:+":${2}"}"
    else
      echo "${2}"
    fi
  else
    echo "${2}"
  fi
}

# Add .local/bin to path if necessary
if [ -d "${HOME}/.local/bin" ]; then
   export PATH="$(_addToPath "${HOME}/.local/bin" "${PATH}")"
fi

# Use a common user directory as root for locally installed packages
# for nodejs, go, etc
case "$(uname)" in
    Darwin)
	_LOCAL_LIB_ROOT="${HOME}/Library"
	;;

    Linux)
	_LOCAL_LIB_ROOT="${HOME}/lib"
	;;

    MINGW*)
	_LOCAL_LIB_ROOT="${HOME}/Documents/lib"
	;;

    *)
	_LOCAL_LIB_ROOT="does/not/exist"
	;;
esac

# Node.js
_LOCAL_NODE_PATH="${_LOCAL_LIB_ROOT}/node"
if [ -n "${_LOCAL_NODE_PATH}" -a -d "${_LOCAL_NODE_PATH}" ]; then
   export NODE_PATH="$(_addToPath "${_LOCAL_NODE_PATH}" "${NODE_PATH}")"
   export PATH="$(_addToPath "${_LOCAL_NODE_PATH}/bin" "${PATH}")"
   cat >| ${HOME}/.npmrc <<EOF
prefix=${_LOCAL_NODE_PATH}
EOF
fi
unset _LOCAL_NODE_PATH

# Python path - deprecated, pip uses .local by default
#_LOCAL_PYTHON_PATH="${_LOCAL_LIB_ROOT}/python"
if [ -n "${_LOCAL_PYTHON_PATH}" -a -d "${_LOCAL_PYTHON_PATH}" ]; then
    export PYTHONPATH="$(_addToPath "${_LOCAL_PYTHON_PATH}" "${PYTHON_PATH}")"
    export PATH="$(_addToPath "${_LOCAL_PYTHON_PATH}/bin" "${PATH}")"
fi
unset _LOCAL_PYTHON_PATH

# Setup GO
_LOCAL_GO_PATH="${_LOCAL_LIB_ROOT}/go"
if [ -n "${_LOCAL_GO_PATH}" -a -d "${_LOCAL_GO_PATH}" ]; then
    export GOPATH="$(_addToPath "${_LOCAL_GO_PATH}" "${GOPATH}")"
    export PATH="$(_addToPath "${_LOCAL_GO_PATH}/bin" "${PATH}")"
fi
unset _LOCAL_GO_PATH
go version 2>/dev/null | grep -q 'go1.5' 2>/dev/null && export GO15VENDOREXPERIMENT=1

# Android SDK support
case "$(uname)" in
    Darwin)
        _SDK_PLATFORM=macosx
        ;;

    Linux)
        _SDK_PLATFORM=linux
        ;;

    *)
        _SDK_PLATFORM=unknown
        ;;
esac
_LOCAL_ANDROID_ROOT="${_LOCAL_LIB_ROOT}/android-sdk-${_SDK_PLATFORM}"
if [ -n "${_LOCAL_ANDROID_ROOT}" -a -d "${_LOCAL_ANDROID_ROOT}" ]; then
    # Force use of system install libs
    export ANDROID_EMULATOR_USE_SYSTEM_LIBS=1
    export ANDROID_HOME="${_LOCAL_ANDROID_ROOT}"
    export PATH="$(_addToPath "${_LOCAL_ANDROID_ROOT}/platform-tools" "${PATH}")"
    export PATH="$(_addToPath "${_LOCAL_ANDROID_ROOT}/tools" "${PATH}")"    
fi
unset _SDK_PLATFORM
unset _LOCAL_ANDROID_ROOT

# Android studio support
if [ -d "${HOME}/android-studio/bin" ]; then
   export PATH="$(_addToPath "${HOME}/android-studio/bin" "${PATH}")"
fi

# Add local gems to PATH
if which ruby > /dev/null && which gem > /dev/null; then
    export PATH="$(_addToPath "$(ruby -rubygems -e 'puts Gem.user_dir')/bin" "${PATH}")"
fi

# Set lein home to lib
_LOCAL_LEIN_HOME="${_LOCAL_LIB_ROOT}/lein"
if [ -n "${_LOCAL_LEIN_HOME}" -a -d "${_LOCAL_LEIN_HOME}" ]; then
    export LEIN_HOME="${_LOCAL_LEIN_HOME}"
fi
unset _LOCAL_LEIN_HOME

# Have I installed GCP SDK manually on this device?
_LOCAL_GCPSDK_HOME="${_LOCAL_LIB_ROOT}/google-cloud-sdk"
if [ -n "${_LOCAL_GCPSDK_HOME}" -a -d "${_LOCAL_GCPSDK_HOME}" ]; then
    [ -f "${_LOCAL_GCPSDK_HOME}/path.bash.inc" ] && . "${_LOCAL_GCPSDK_HOME}/path.bash.inc"
    [ -f "${_LOCAL_GCPSDK_HOME}/completion.bash.inc" ] && . "${_LOCAL_GCPSDK_HOME}/completion.bash.inc"
fi
unset _LOCAL_GCPSDK_HOME

# Moved swift out of .local
_LOCAL_SWIFT_HOME="${_LOCAL_LIB_ROOT}/swift"
if [ -n "${_LOCAL_SWIFT_HOME}" -a -d "${_LOCAL_SWIFT_HOME}" ]; then
    export PATH="$(_addToPath "${_LOCAL_SWIFT_HOME}/bin" "${PATH}")"
    export LD_LIBRARY_PATH="$(_addToPath "${_LOCAL_SWIFT_HOME}/lib" "${LD_LIBRARY_PATH}")"
    export C_INCLUDE_PATH="$(_addToPath "${_LOCAL_SWIFT_HOME}/include" "${C_INCLUDE_PATH}")"
    export CPLUS_INCLUDE_PATH="$(_addToPath "${_LOCAL_SWIFT_HOME}/include" "${C_INCLUDE_PATH}")"
    export MANPATH="$(_addToPath "${_LOCAL_SWIFT_HOME}/share/man" "${MANPATH}")"
fi
unset _LOCAL_SWIFT_HOME

# .NET core
_LOCAL_DOTNET_HOME="${_LOCAL_LIB_ROOT}/.net"
if [ -n "${_LOCAL_DOTNET_HOME}" -a -d "${_LOCAL_DOTNET_HOME}" ]; then
    export PATH="$(_addToPath "${_LOCAL_DOTNET_HOME}" "${PATH}")"
    if [ -n "${_LOCAL_DOTNET_HOME}" -a -d "${_LOCAL_DOTNET_HOME}/omnisharp" ]; then
	export PATH="$(_addToPath "${_LOCAL_DOTNET_HOME}/omnisharp" "${PATH}")"
    fi
fi
unset _LOCAL_DOTNET_HOME

# intellij support
if [ -d "${HOME}/intellij/bin" ]; then
   export PATH="$(_addToPath "${HOME}/intellij/bin" "${PATH}")"
fi

# istio support
_LOCAL_ISTIO_HOME="${_LOCAL_LIB_ROOT}/istio"
if [ -n "${_LOCAL_ISTIO_HOME}" -a -d "${_LOCAL_ISTIO_HOME}" ]; then
    export PATH="$(_addToPath "${_LOCAL_ISTIO_HOME}/bin" "${PATH}")"
fi
unset _LOCAL_ISTIO_HOME

# Source private profile file if it exists
[ -f "${HOME}/.profile_memes_private" ] && . "${HOME}/.profile_memes_private"
