# -*- mode: sh -*-
# shellcheck shell=bash
#
# Implements a wrapper for Volterra Terraform container, passing variables from
# current shell into the Volterra container with path munging as needed.
#
# Arguments will be treated as file names and copied into a temporary volume
# mounted at /var/tmp
# spell-checker: ignore volterra
volterra-tf()
{
    # spell-checker: disable
    local _VOLTERRA_HOME=${HOME}/.volterra
    local _AWS_HOME=${HOME}/.aws
    local _TARGET_VOLTERRA_HOME=/root/.volterra
    local _TARGET_AWS_HOME=/root/.aws
    local _VOLT_API_P12_FILE=${VOLT_API_P12_FILE//${_VOLTERRA_HOME}/${_TARGET_VOLTERRA_HOME}}
    local _VOLT_API_CERT=${VOLT_API_CERT//${_VOLTERRA_HOME}/${_TARGET_VOLTERRA_HOME}}
    local _VOLT_API_KEY=${VOLT_API_KEY//${_VOLTERRA_HOME}/${_TARGET_VOLTERRA_HOME}}
    local _AWS_SHARED_CREDENTIALS_FILE=${AWS_SHARED_CREDENTIALS_FILE//${_AWS_HOME}/${_TARGET_AWS_HOME}}
    local _env_file="$(mktemp)"
    cat <<EOF > "${_env_file}"
${_VOLT_API_P12_FILE:+VOLT_API_P12_FILE="${_VOLT_API_P12_FILE}"}
${VES_P12_PASSWORD:+VES_P12_PASSWORD="${VES_P12_PASSWORD}"}
${_VOLT_API_CERT:+VOLT_API_CERT="${_VOLT_API_CERT}"}
${_VOLT_API_KEY:+VOLT_API_KEY="${_VOLT_API_KEY}"}
${VOLT_API_URL:+VOLT_API_URL="${VOLT_API_URL}"}
${VOLT_API_URL:+TF_VAR_akar_api_url="${VOLT_API_URL}"}
${VOLT_API_TIMEOUT:+VOLT_API_TIMEOUT="${VOLT_API_TIMEOUT}"}
${AWS_ACCESS_KEY_ID:+AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"}
${AWS_SECRET_ACCESS_KEY:+AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"}
${AWS_SESSION_TOKEN:+AWS_SESSION_TOKEN="${AWS_SESSION_TOKEN}"}
${_AWS_SHARED_CREDENTIALS_FILE:+AWS_SHARED_CREDENTIALS_FILE="${_AWS_SHARED_CREDENTIALS_FILE}"}
${AWS_PROFILE:+AWS_PROFILE="${AWS_PROFILE}"}
${AWS_DEFAULT_REGION:+AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION}"}
EOF
    local _nonce="$(date +%s)"
    populate-container-volume ${_nonce}_ssh ${HOME}/.ssh
    populate-container-volume ${_nonce}_volterra ${HOME}/.volterra
    populate-container-volume ${_nonce}_aws ${HOME}/.aws
    populate-container-volume ${_nonce}_azure ${HOME}/.azure
    populate-container-volume ${_nonce}_gcloud ${HOME}/.config/gcloud
    podman volume create ${_nonce}_tmp
    tmp_container="$(podman create --mount type=volume,src=${_nonce}_tmp,target=/mnt busybox)"
    for arg in $@; do
        [ -e "${arg}" ] && podman cp -a "${arg}" "${tmp_container}:/mnt/"
    done
    podman rm ${tmp_container}
    podman pull gcr.io/volterraio/volt-terraform:latest || true
    podman run --rm -it --name volterra-tf \
        -w /terraform/templates/views/assisted \
        --mount type=volume,src=${_nonce}_ssh,target=/root/.ssh,ro \
        --mount type=volume,src=${_nonce}_volterra,target=/root/.volterra,ro \
        --mount type=volume,src=${_nonce}_aws,target=/root/.aws,ro \
        --mount type=volume,src=${_nonce}_azure,target=/root/.azure,ro \
        --mount type=volume,src=${_nonce}_gcloud,target=/root/.config/gcloud,ro \
        --mount type=volume,src=${_nonce}_tmp,target=/var/tmp,ro \
        --env-file "${_env_file}" \
        --entrypoint sh \
        gcr.io/volterraio/volt-terraform:latest
    rm -f "${_env_file}"
    podman volume rm ${_nonce}_ssh ${_nonce}_volterra ${_nonce}_aws ${_nonce}_azure ${_nonce}_gcloud ${_nonce}_tmp
}
