[user]
	email = memes@matthewemes.com
	name = Matthew Emes
	signingkey = EE2664DD38F53BA6849E99B7757446333D3EC29A
[push]
	default = simple
	followTags = true
[status]
	showUntrackedFiles = all
[transfer]
	fsckobjects = true
[credential]
	useHttpPath = true
# Various shortcuts
[alias]
	branches = branch -a
	tags = tag
	stashall = stash save --all
	stashes = stash list
	undo = reset --soft HEAD^
	unstage = reset -q HEAD --
	revert = checkout --
	uncommit = reset --mixed HEAD~
	amend = commit --amend
	graph = log --graph --topo-order --abbrev-commit --date=short --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset'
	patch = add --patch
	patches = log --patch --decorate -10
	review = diff --cached --diff-algorithm=minimal -w
	prune = fetch --prune
	words = diff --word-diff
	recent = for-each-ref --count=10 --sort=committerdate refs/heads/ --format="%(refname:short)"
	upstream = "!git log --oneline --no-merges ..origin/$(git branch-name)"
	pr = !"f() { git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git checkout master ; git for-each-ref refs/heads/pr/* --format="%(refname)" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
	ours = !"f() { git checkout --ours $@ && git add $@; }; f"
	theirs = !"f() { git checkout --theirs $@ && git add $@; }; f"
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	publish = "!git push -u origin $(git branch-name)"
	unpublish = "!git push origin :$(git branch-name)"
	is-clean = "!exit $(git status --porcelain 2>/dev/null | wc -l)"
	sync-upstream = !"f() { git fetch --all && git is-clean && git pull upstream $(git branch-name) && git publish; }; f"
[gpg]
	program = gpg
[core]
	excludesfile = ~/.gitignore.memes
	# Clone from https://github.com/pivotal-cf/git-hooks-core and
	# install cred-alert-cli
	#hooksPath = ~/projects/pivotal-cf/git-hooks-core
[color]
	ui = auto
[http]
	cookiefile = ~/.gitcookies
[github]
	user = memes
[merge]
	conflictstyle = diff3
	tool = ediff
[mergetool "ediff"]
	cmd = emacsclient -c -a \"\" --eval \"(ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\" \\\"$BASE\\\" nil \\\"$MERGED\\\" (lambda (delete-frame (selected-frame))))\"
	trustExitCode = true

# Pull in any configuration that can't be stored in public git repo
#  - try to keep last configuration option in file
[include]
	path = ~/.gitconfig.private
